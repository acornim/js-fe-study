{"version":3,"sources":["serviceWorker.js","string.js","About.jsx","App.js","index.js"],"names":["Boolean","window","location","hostname","match","_","me","to","plan","infoTitle","info","policyTitle","policy","resume","resumeUrl","dueDate","About","map","v","href","target","App","useState","name","setName","showName","setShowName","isPass","useRef","trim","length","className","current","class","id","type","value","onChange","e","onClick","preventDefault","Hot","hot","require","app","ReactDOM","render","document","querySelector","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"2JAYoBA,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2D,WCmBSC,EArCL,CACRC,GACE,0OACFC,GAAI,0IACJC,KACE,sdACFC,UAAW,wEACXC,KAAM,CACJ,+DACA,kFACA,2BACA,0GACA,MACA,iBACA,qDACA,mBACA,2BACA,mBACA,0DACA,8CACA,8CAEFC,YAAa,mCACbC,OAAQ,CACN,wGACA,6IACA,4JACA,+MACA,qMACA,2OAEFC,OAAQ,oFACRC,UACE,kHACFC,QAAS,oHCLIC,EA1BD,WACZ,OACE,oCACE,4BAAKX,EAAEC,IACP,4BACGD,EAAEE,GADL,IACUF,EAAEG,MAEZ,4BAAKH,EAAEI,WACNJ,EAAEK,KAAKO,KAAI,SAAAC,GACV,OAAO,4BAAKA,MAEd,4BAAKb,EAAEM,aACNN,EAAEO,OAAOK,KAAI,SAAAC,GACZ,OAAO,4BAAKA,MAEd,4BAAKb,EAAEQ,QACP,4BAAKR,EAAEU,SACP,4BACE,uBAAGI,KAAMd,EAAES,UAAWM,OAAO,UAA7B,oECmCOC,EArDH,WAAO,IAAD,EACQC,mBAAS,IADjB,mBACTC,EADS,KACHC,EADG,OAEgBF,mBAAS,IAFzB,mBAETG,EAFS,KAECC,EAFD,KAGVC,EAASC,kBAAO,GActB,OACE,oCACGH,EAASI,OAAOC,OAAS,EACxB,wBAAIC,UAAU,aACXN,EADH,WACe,6BADf,8DAIA,wBAAIM,UAAU,aAAd,2DAGDJ,EAAOK,SAAWP,EAASI,OAAOC,OAAS,EAC1C,kBAAC,EAAD,MAEA,yBAAKG,MAAM,cAAcC,GAAG,QAC1B,2BACEC,KAAK,OACLZ,KAAK,OACLU,MAAM,eACNG,MAAOb,EACPc,SAzBY,SAAAC,GACE,SAAlBA,EAAElB,OAAOG,MACXC,EAAQc,EAAElB,OAAOgB,UAyBb,0BAAMH,MAAM,mBACV,4BACEA,MAAM,kBACNE,KAAK,SACLI,QArCS,SAAAD,GACnBA,EAAEE,iBACFd,EAAYH,GACZI,EAAOK,SAAU,IA+BT,oBCnCNS,GAAMC,EAFIC,EAAQ,IAAhBD,KAEQE,GAEhBC,IAASC,OAAO,kBAACL,EAAD,MAASM,SAASC,cAAc,UJwH1C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,iB","file":"static/js/main.1a6e9e23.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","const _ = {\n  me:\n    \"안녕하세요. 저는 코드스테이츠 엠배서더로 활동하고있는 소프트웨어학과 이상아 입니다.\",\n  to: \"같이 JS, Front-End 스터디를 같이 할 팀원을 구하고 있습니다.\",\n  plan:\n    \"매주 2시간씩, 17주라는 길다면 긴, 짧다면 짧은 시간 동안 스터디를 진행합니다. 내용 또한 조금 버거울 수 있습니다. 하지만 그만큼, 스터디가 끝나면 배운게 많다는 것을 알게 되실 거에요.\",\n  infoTitle: \"이렇게 진행할 예정입니다.\",\n  info: [\n    \"변수, 타입, 조건문, 함수\",\n    \"배열, 반복문, 배열의 반복, 객체\",\n    \"중간고사\",\n    \"문자열 다루기, 배열 다루기, 숫자 다루기\",\n    \"TDD\",\n    \"Scope, Closure\",\n    \"매개변수, 객체지향\",\n    \"HTML, CSS, DOM 1\",\n    \"기말고사\",\n    \"HTML, CSS, DOM 2\",\n    \"비동기 호출, 타이머 API\",\n    \"서버 요청하기, this\",\n    \"prototype, 함수 메소드\"\n  ],\n  policyTitle: \"규칙 입니다.\",\n  policy: [\n    \"20,000원의 보증금을 미리 걷고 시작합니다.\",\n    \"지각은 분당 100원 (최대 2,000원), 결석은 5,000원을 차감합니다.\",\n    \"한 사람이 모두 하는게 아니라, 매번 돌아가면서 설명합니다.\",\n    \"진행자는 3개의 질문을 준비해옵니다. (자료는 이해를 돕는 수준에서 준비합니다)\",\n    \"진행자는 매번 진행할 때 마다, 3,000원씩 (차감된 금액 안에서) 채울 수 있습니다.\",\n    \"질문자가 대답할 사람을 랜덤으로 골랐을 때, 제대로 대답하지 못한다면 500원을 차감합니다.\"\n  ],\n  resume: \"지원서는 이쪽으로 보내주세요.\",\n  resumeUrl:\n    \"https://docs.google.com/forms/d/e/1FAIpQLSeDoEKbf9wCVhD_hrAy7L1Mn_pa4V3BdbVY2EdckTPvPoL1xA/viewform?usp=sf_link\",\n  dueDate: \"마감 기한은 9월 28일 토요일 밤 11:59 까지입니다.\"\n};\n\nexport default _;\n","import React from \"react\";\nimport _ from \"./string\";\n\nconst About = () => {\n  return (\n    <>\n      <h3>{_.me}</h3>\n      <h4>\n        {_.to} {_.plan}\n      </h4>\n      <h3>{_.infoTitle}</h3>\n      {_.info.map(v => {\n        return <li>{v}</li>;\n      })}\n      <h3>{_.policyTitle}</h3>\n      {_.policy.map(v => {\n        return <li>{v}</li>;\n      })}\n      <h3>{_.resume}</h3>\n      <h4>{_.dueDate}</h4>\n      <h4>\n        <a href={_.resumeUrl} target=\"_blank\">\n          구글폼으로 이동합니다\n        </a>\n      </h4>\n    </>\n  );\n};\n\nexport default About;\n","import React, { useState, useRef } from \"react\";\nimport About from \"./About\";\n\nconst App = () => {\n  const [name, setName] = useState(\"\");\n  const [showName, setShowName] = useState(\"\");\n  const isPass = useRef(false);\n\n  const onSubmitForm = e => {\n    e.preventDefault();\n    setShowName(name);\n    isPass.current = true;\n  };\n\n  const onChangeInput = e => {\n    if (e.target.name === \"name\") {\n      setName(e.target.value);\n    }\n  };\n\n  return (\n    <>\n      {showName.trim().length > 0 ? (\n        <h3 className=\"MainTitle\">\n          {showName} 님,<br></br> 같이 스터디 하실래요?\n        </h3>\n      ) : (\n        <h3 className=\"MainTitle\">이름을 입력해주세요</h3>\n      )}\n\n      {isPass.current && showName.trim().length > 0 ? (\n        <About />\n      ) : (\n        <div class=\"input-group\" id=\"form\">\n          <input\n            type=\"text\"\n            name=\"name\"\n            class=\"form-control\"\n            value={name}\n            onChange={onChangeInput}\n          />\n          <span class=\"input-group-btn\">\n            <button\n              class=\"btn btn-default\"\n              type=\"button\"\n              onClick={onSubmitForm}\n            >\n              클릭\n            </button>\n          </span>\n        </div>\n      )}\n    </>\n  );\n};\n\nexport default App;\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport \"./index.css\";\nimport * as serviceWorker from \"./serviceWorker\";\nimport app from \"./App\";\nconst { hot } = require(\"react-hot-loader/root\");\n\nconst Hot = hot(app);\n\nReactDOM.render(<Hot />, document.querySelector(\"#root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}